/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/aliases': {
    get: {
      parameters: {
        query: {
          /** Only list aliases that are associated with the specified deployment. */
          deploymentId: string;
          /** Beginning index from where to get the aliases. */
          startIndex?: string;
        };
      };
      responses: {
        /** Successful response. */
        200: {
          content: {
            'application/json': components['schemas']['Deployment'][][];
          };
        };
      };
    };
  };
  '/deployments': {
    get: {
      parameters: {
        query: {
          /** Beginning index from where to get the deployments. */
          startAt?: string;
        };
      };
      responses: {
        /** Successful response. */
        200: {
          content: {
            'application/json': {
              metadata: components['schemas']['Pagination'];
              items: components['schemas']['Deployment'][];
            };
          };
        };
      };
    };
    post: {
      responses: {
        /** Successful response. */
        201: {
          content: {
            'application/json': components['schemas']['DeploymentInitialized'];
          };
        };
      };
    };
  };
  '/deployments/{deploymentId}': {
    get: {
      parameters: {
        path: {
          /** The id of the deployment to get. */
          deploymentId: string;
        };
      };
      responses: {
        /** Successful response. */
        200: {
          content: {
            'application/json': components['schemas']['Deployment'];
          };
        };
        404: components['responses']['NotFound'];
      };
    };
    delete: {
      parameters: {
        path: {
          /** The id of the deployment to delete. */
          deploymentId: string;
        };
      };
      responses: {
        /** Successful response. */
        204: never;
        400: components['responses']['InvalidParamsError'];
      };
    };
  };
}

export interface components {
  schemas: {
    Error: {
      status: number;
      code: string;
      message?: string;
    };
    Pagination: {
      next: string | null;
    };
    Alias: {
      id?: string;
    };
    /** @enum {string} */
    DeploymentStatus:
      | 'INITIALIZED'
      | 'CREATE_IN_PROGRESS'
      | 'CREATE_COMPLETE'
      | 'CREATE_FAILED'
      | 'FINISHED'
      | 'DESTROY_IN_PROGRESS'
      | 'DESTROY_FAILED';
    DeploymentInitialized: {
      id: string;
      status: components['schemas']['DeploymentStatus'];
      uploadUrl: string;
      uploadAttributes: { [key: string]: unknown };
    };
    Deployment: {
      id: string;
      status: components['schemas']['DeploymentStatus'];
      /** Format: date-time */
      createDate: string;
      deploymentAlias?: string;
    };
  };
  responses: {
    /** The specified resource was not found. */
    NotFound: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
    /** The validation of the parameters failed. */
    InvalidParamsError: {
      content: {
        'application/json': components['schemas']['Error'];
      };
    };
  };
}

export interface operations {}

export interface external {}
