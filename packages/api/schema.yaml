# OpenAPI 3.0 schema for the API endpoints

openapi: 3.1.0

info:
  title: Terraform Next.js API
  version: 1.0.0

components:
  securitySchemes:
    sigv4:
      type: apiKey
      in: header
      name: Authorization
      'x-amazon-apigateway-authtype': 'awsSigv4'

  schemas:
    # Utilities
    Error:
      type: object
      properties:
        status:
          type: number
        code:
          type: string
        message:
          type: string
      required:
        - status
        - code

    Pagination:
      type: object
      properties:
        next:
          type: string
          nullable: true
      required:
        - next

    # Entities

    DeploymentStatus:
      type: string
      enum:
        - INITIALIZED
        - CREATE_IN_PROGRESS
        - CREATE_COMPLETE
        - CREATE_FAILED
        - FINISHED

    DeploymentInitialized:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        uploadUrl:
          type: string
        uploadAttributes:
          type: object
      required:
        - id
        - status
        - uploadUrl
        - uploadAttributes

    Deployment:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        createDate:
          type: string
          format: date-time
        deploymentAlias:
          type: string
      required:
        - id
        - status
        - createDate

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - sigv4: []

paths:
  /deployments:
    get:
      summary: List all deployments.
      parameters:
        - in: query
          name: startIndex
          schema:
            type: string
          description: Beginning index from where to get the deployments.

      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Pagination'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deployment'

                required:
                  - metadata
                  - items

    post:
      summary: Initializes a new deployment and creates a upload link where the deployment package can be uploaded to.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentInitialized'

  /deployments/{deploymentId}:
    get:
      summary: Request a deployment by its Id.
      parameters:
        - in: path
          name: deploymentId
          schema:
            type: string
          required: true
          description: The id of the deployment to get.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '404':
          $ref: '#/components/responses/NotFound'
