# OpenAPI 3.0 schema for the API endpoints

openapi: 3.1.0

info:
  title: MilliVolt deployment API
  version: 1.0.0

components:
  securitySchemes:
    sigv4:
      type: apiKey
      in: header
      name: Authorization
      'x-amazon-apigateway-authtype': 'awsSigv4'

  schemas:
    # Utilities
    Error:
      type: object
      properties:
        status:
          type: number
        code:
          type: string
        message:
          type: string
      required:
        - status
        - code

    Pagination:
      type: object
      properties:
        next:
          type: string
          nullable: true
      required:
        - next

    # Entities
    Alias:
      type: object
      properties:
        id:
          type: string
        deployment:
          type: string
        createDate:
          type: string
      required:
        - id
        - deployment
        - createDate

    DeploymentStatus:
      type: string
      enum:
        - INITIALIZED
        - CREATE_IN_PROGRESS
        - CREATE_COMPLETE
        - CREATE_FAILED
        - FINISHED
        - DESTROY_IN_PROGRESS
        - DESTROY_FAILED
        - DESTROY_REQUESTED

    DeploymentInitialized:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        uploadUrl:
          type: string
        uploadAttributes:
          type: object
      required:
        - id
        - status
        - uploadUrl
        - uploadAttributes

    Deployment:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/DeploymentStatus'
        createDate:
          type: string
          format: date-time
        deploymentAlias:
          type: string
      required:
        - id
        - status
        - createDate

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidParamsError:
      description: The validation of the parameters failed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - sigv4: []

paths:
  /aliases:
    get:
      summary: List all aliases associated with a given deployment, sorted by its creation date DESC.
      parameters:
        - in: query
          name: deploymentId
          schema:
            type: string
          required: true
          description: Only list aliases that are associated with the specified deployment.
        - in: query
          name: startAt
          schema:
            type: string
          description: Beginning index from where to get the aliases.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Pagination'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alias'
                required:
                  - metadata
                  - items
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/InvalidParamsError'

    post:
      summary: Create a new alias or update an existing alias.
      requestBody:
        description: Request payload.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                alias:
                  type: string
                target:
                  type: string
                override:
                  type: boolean
              required:
                - alias
                - target
      responses:
        '201':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
        '400':
          $ref: '#/components/responses/InvalidParamsError'

  /aliases/{hostname}/{basePath}:
    delete:
      summary: Request a deployment by its Id.
      parameters:
        - in: path
          name: hostname
          schema:
            type: string
          required: true
          description: The hostname of the alias that should be deleted.
        - in: path
          name: basePath
          schema:
            type: string
          description: The basePath of the alias that should be deleted. If not present, defaults to `/`.
      responses:
        '204':
          description: Successful response.
        '400':
          $ref: '#/components/responses/InvalidParamsError'
        '404':
          $ref: '#/components/responses/NotFound'

  /deployments:
    get:
      summary: List all deployments sorted by its creation date DESC.
      parameters:
        - in: query
          name: startAt
          schema:
            type: string
          description: Beginning index from where to get the deployments.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata:
                    $ref: '#/components/schemas/Pagination'
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Deployment'
                required:
                  - metadata
                  - items

    post:
      summary: Initializes a new deployment and creates a upload link where the deployment package can be uploaded to.
      responses:
        '201':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentInitialized'

  /deployments/{deploymentId}:
    get:
      summary: Request a deployment by its Id.
      parameters:
        - in: path
          name: deploymentId
          schema:
            type: string
          required: true
          description: The id of the deployment to get.
      responses:
        '200':
          description: Successful response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a single deployment by its Id.
      parameters:
        - in: path
          name: deploymentId
          schema:
            type: string
          required: true
          description: The id of the deployment to delete.
      responses:
        '200':
          description: Deletion successfully requested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
        '204':
          description: Successful deletion.
        '400':
          $ref: '#/components/responses/InvalidParamsError'
